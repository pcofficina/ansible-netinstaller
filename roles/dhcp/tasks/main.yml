---
# tasks file for role/dhcp
- name: Calculate network information for DHCP pool
  ansible.builtin.set_fact:
    # Format the full CIDR network representation
    network_cidr: "{{ dhcp_lan_net }} / {{ dhcp_lan_netmask }}"
    # Get the first usable IP in the subnet
    first_usable_ip: "{{ (dhcp_lan_net + '/' + dhcp_lan_netmask | string) | ansible.utils.ipaddr('first_usable') }}"
    # Get the last usable IP in the subnet
    last_usable_ip: "{{ (dhcp_lan_net + '/' + dhcp_lan_netmask | string) | ansible.utils.ipaddr('last_usable') }}"
    # Calculate total usable IPs (network size minus network and broadcast)
    usable_ip_count: "{{ ((dhcp_lan_net + '/' + dhcp_lan_netmask | string) | ansible.utils.ipaddr('size') | int) - 2 }}"

- name: Calculate total reserved IPs for DHCP
  ansible.builtin.set_fact:
    # Total IPs to reserve (80% of usable)
    total_reserved: "{{ (usable_ip_count | int * 0.20) | round | int }}"

- name: Calculate start and end reserved IP ranges for DHCP
  ansible.builtin.set_fact:
    # IPs to reserve at the beginning of the subnet (~40%)
    reserved_at_start: "{{ (total_reserved | int / 2) | round | int }}"
    # IPs to reserve at the end of the subnet (~40%)
    reserved_at_end: "{{ (total_reserved | int / 2) | round | int }}"

- name: Set DHCP pool start and end addresses
  ansible.builtin.set_fact:
    # DHCP pool starts after the reserved IPs at the beginning
    dhcp_lan_ip_pool_start: "{{ first_usable_ip | ansible.utils.ipmath(reserved_at_start | int) }}"
    # DHCP pool ends before the reserved IPs at the end
    dhcp_lan_ip_pool_end: "{{ last_usable_ip | ansible.utils.ipmath(reserved_at_end | int * -1) }}"

- name: Install Kea DHCPv4 server
  ansible.builtin.apt:
    package: kea-dhcp4-server
    state: latest
    install_recommends: false
    fail_on_autoremove: true

- name: Check if AppArmor specific file exist
  ansible.builtin.stat:
    path: "{{ dhcp_apparmor_conf }}"
  register: apparmor_state

# - name: Ensure hook is present in {{ apparmor_conf }}
#   ansible.builtin.lineinfile:
#     path: "{{ apparmor_conf }}"
#     line: '/etc/kea/** r,'
#     state: present
#     create: false
#   when: apparmor_state.stat.exists

- name: Ensure kea can read temp conf file from ansible temp dir
  ansible.builtin.blockinfile:
    path: "{{ dhcp_apparmor_conf }}"
    block: |
      /root/.ansible/tmp/ r,
      /root/.ansible/tmp/** rw,
    marker: "### {mark} ANSIBLE MANAGED BLOCK"
    insertbefore: "}"
    mode: "0644"
  when: apparmor_state.stat.exists
  notify: Reload AppArmor

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  ansible.builtin.meta: flush_handlers

- name: Deploy Kea DHCPv4 server configuration
  ansible.builtin.template:
    src: templates/kea-dhcp4.conf.j2
    dest: /etc/kea/kea-dhcp4.conf
    mode: "0644"
    validate: /usr/sbin/kea-dhcp4 -t %s
    backup: true
  notify: Restart DHCP

- name: Ensure Kea DHCPv4 server is enabled and running
  ansible.builtin.service:
    name: kea-dhcp4-server
    enabled: true
    state: started
